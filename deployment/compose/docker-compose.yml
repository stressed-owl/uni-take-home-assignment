volumes:
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nats_data:
    driver: local

networks:
  app-network:
    driver: bridge
  monitoring:
    driver: bridge

services:
  publisher:
    image: andriiuni/events
    container_name: publisher
    restart: always
    networks:
      - app-network

  gateway:
    container_name: gateway
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      nats:
        condition: service_healthy
    networks:
      - app-network

  fb-collector:
    container_name: fb-collector
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      nats:
        condition: service_healthy
    networks:
      - app-network

  ttk-collector:
    container_name: ttk-collector
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      nats:
        condition: service_healthy
    networks:
      - app-network

  reporter:
    container_name: reporter
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      nats:
        condition: service_healthy
    networks:
      - app-network

  postgres:
    image: postgres:17-alpine
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Mount the initialization script. It will run only once on first start.
      - ./deployment/postgres/init-multiple-dbs.sh:/docker-entrypoint-initdb.d/init-multiple-dbs.sh

  nats:
    image: nats:2.11.7-alpine
    container_name: nats
    restart: unless-stopped
    command: "-c /etc/nats/nats.conf"
    volumes:
      - ./nats/nats.conf:/etc/nats/nats.conf:ro
      - nats_data:/data/jetstream
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:v3.5.0
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.wal-compression'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    networks:
      - monitoring
      - app-network

  grafana:
    image: grafana/grafana:12.2.0-16557133545
    container_name: grafana
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - monitoring